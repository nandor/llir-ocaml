# 2 "asmcomp/llir/emit.mlp"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                 Nandor Licker, University of Cambridge                 *)
(*                                                                        *)
(*   Copyright 2018--     Nandor Licker                                   *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* Specific operations for the GenM processor *)

open Arch
open Cmm
open Mach
open Emitaux
open Reg
open Linear

let emit_symbol s = Emitaux.emit_symbol '$' s

let emit_label lbl = emit_string ".L"; emit_int lbl

let fundecl f =
  let align = 
    match Arch.subarch with
    | AMD64 -> 4
    | ARM64 -> 3
    | RISCV -> 3
    | POWER -> 4
  in
  `  .section .text\n`;
  `  .p2align {emit_int align}\n`;
  `  .globl {emit_symbol f.fun_name}\n`;
  `{emit_symbol f.fun_name}:\n`;
  `  .call\tcaml\n`;

  let bound_error_labels = ref [] in

  (* Emit sequentially numbered temporaries *)
  let next_reg = ref 0 in
  let make_temp () =
    let n = !next_reg in
    next_reg := n + 1;
    ((n lsl 3) lor 5)
  in
  let emit_temp n = emit_string ("$" ^ (string_of_int n)) in

  let emit_const n =
    let reg = make_temp () in
    `  mov.i64 {emit_temp reg}, {emit_int n}\n`;
    reg
  in

  let emit_addr symbol =
    let temp = make_temp () in
    `  mov.i64 {emit_temp temp}, {emit_symbol symbol}\n`;
    temp
  in

  let emit_cc cc =
    let cc_str = match cc with
      | Isigned   Ceq -> "eq"
      | Isigned   Cne -> "ne"
      | Isigned   Clt -> "lt"
      | Isigned   Cgt -> "gt"
      | Isigned   Cle -> "le"
      | Isigned   Cge -> "ge"
      | Iunsigned Ceq -> "eq"
      | Iunsigned Cne -> "ne"
      | Iunsigned Clt -> "ult"
      | Iunsigned Cgt -> "ugt"
      | Iunsigned Cle -> "ule"
      | Iunsigned Cge -> "uge"
    in emit_string cc_str
  in

  let emit_reg = function
    | { loc = Reg r } ->
      emit_string ("$" ^ string_of_int r)
    | { stamp } ->
      emit_string ("$" ^ string_of_int ((stamp lsl 3) lor 4))
  in

  let string_of_type = function
    | Float-> "f64"
    | Val -> "v64"
    | Addr -> "i64"
    | Int -> "i64"
  in

  let emit_type typ =
    emit_string (string_of_type typ)
  in

  let emit_res = function
    | [| { typ } |] -> emit_type typ
    | _ -> assert false
  in

  let emit_regs regs st en =
    match regs with
    | [| |] -> ()
    | regs ->
      emit_string st;
      let n = Array.length regs in
      Array.iteri (fun i reg ->
        emit_reg reg;
        if i + 1 <> n then emit_string ", "
      ) regs;
      emit_string en
  in

  let call_types = function
    | [||] -> ""
    | res ->
      Array.to_list res
      |> List.map (fun { typ } -> string_of_type typ)
      |> String.concat "."
      |> (fun s -> "." ^ s)
  in

  let encode_dbgs kind dbgs =
    let open Debuginfo in
    let pack_info d =
      let line = min 0xFFFFF d.dinfo_line in
      let char_start = min 0xFF d.dinfo_char_start in
      let char_end = min 0x3FF d.dinfo_char_end in
      Int64.(add (shift_left (of_int line) 44)
               (add (shift_left (of_int char_start) 36)
                  (add (shift_left (of_int char_end) 26)
                     (shift_left (of_int kind) 1))))
    in
    let emit_debug d =
      let defname = Scoped_location.string_of_scopes d.dinfo_scopes in
      emit_printf "0x%Lx " (pack_info d);
      `{emit_string_literal d.dinfo_file} `;
      emit_string_literal defname;
    in
    List.iter (fun dbg -> `({emit_debug dbg})`) dbgs;
  in

  let emit_frame raises dbg =
    match dbg with
    | []   ->
      `  @caml_frame`
    | dbgs ->
      let kind = if raises then 1 else 0 in
      `  @caml_frame(() (({encode_dbgs kind dbgs})))`
  in

  let emit_alloc_frame dbg =
    let has_debug =
      List.exists
        (fun Debuginfo.{ alloc_dbg } -> not (Debuginfo.is_none alloc_dbg))
        dbg
    in
    ` @caml_frame((`;
    List.iter (fun Debuginfo.{ alloc_words } -> `{emit_int alloc_words} `) dbg;
    `) (`;
    if has_debug then begin
      List.iter
        (fun Debuginfo.{ alloc_dbg } ->
          match alloc_dbg with
          | [] -> `()`
          | dbgs -> `({encode_dbgs 0 dbgs})`)
        dbg;
    end;
    `))`;
  in

  let domain_field f =
    let field = make_temp () in
    let offset = emit_const (Domainstate.idx_of_field f * 8) in
    `  add.i64 {emit_temp field}, $5000, {emit_temp offset}\n`;
    field
  in

  (* Exception handler stack *)
  let emit_intop res lhs rhs dbg op handler =
    let emit inst =
      `  {emit_string inst}.{emit_res res} {emit_reg res.(0)}, {emit_reg lhs.(0)}, {rhs ()}\n`
    in
    match op with
    | Iadd    -> emit "add"
    | Isub    -> emit "sub"
    | Imul    -> emit "mul"
    | Idiv    -> emit "sdiv"
    | Imod    -> emit "srem"
    | Iand    -> emit "and"
    | Ior     -> emit "or"
    | Ixor    -> emit "xor"
    | Ilsl    -> emit "sll"
    | Ilsr    -> emit "srl"
    | Iasr    -> emit "sra"
    | Imulh   ->
      let rega = make_temp () in
      let regb = make_temp () in
      let regr = make_temp () in
      let regc = make_temp () in
      `  sext.i128 {emit_temp rega}, {emit_reg lhs.(0)}\n`;
      `  sext.i128 {emit_temp regb}, {rhs ()}\n`;
      `  mul.i128 {emit_temp regr}, {emit_temp rega}, {emit_temp regb}\n`;
      `  mov.i8 {emit_temp regc}, 64\n`;
      `  srl.i128 {emit_temp regr}, {emit_temp regr}, {emit_temp regc}\n`;
      `  trunc.i64 {emit_reg res.(0)}, {emit_temp regr}\n`
    | Icomp cc ->
        `  cmp.{emit_cc cc}.i64 {emit_reg res.(0)}, {emit_reg lhs.(0)}, {rhs ()}\n`;
    | Icheckbound _ ->
      let label = new_label () in
      bound_error_labels := (handler, (label, dbg)) :: !bound_error_labels;
      let flag = make_temp () in
      `  cmp.ule.i8 {emit_temp flag}, {emit_reg lhs.(0)}, {rhs ()}\n`;
      `  jt {emit_temp flag}, {emit_label label} @probability(0 1)\n`
  in

  let state_fields =
    match Arch.subarch with
    | AMD64 ->
      [ Domainstate.Domain_young_ptr, 5001 ]
    | ARM64 ->
      [ Domainstate.Domain_young_ptr, 5001
      ; Domainstate.Domain_young_limit, 5002
      ; Domainstate.Domain_exception_pointer, 5003
      ]
    | RISCV ->
      [ Domainstate.Domain_young_ptr, 5001
      ; Domainstate.Domain_young_limit, 5002
      ; Domainstate.Domain_exception_pointer, 5003
      ]
    | POWER ->
      [ Domainstate.Domain_young_ptr, 5001
      ; Domainstate.Domain_young_limit, 5002
      ; Domainstate.Domain_exception_pointer, 5003
      ]
  in

  let get_field field = List.assoc_opt field state_fields in

  let emit_state_regs () =
    `$5000`;
    state_fields |> List.iter (fun (_, reg) -> `, {emit_temp reg}`);
  in

  let emit_call_ret () =
    `i64`;
    state_fields |> List.iter (fun _ -> `.i64`)
  in

  let emit_prob p br =
    match p with
    | None -> ()
    | Some f ->
      let num = int_of_float (f *. 1000.) in
      let n = if br then num else 1000 - num in
      ` @probability({emit_int n} 1000)`
  in

  let emit_op arg res handler dbg = function
    | Ispill
    | Ireload
    | Istackoffset _
    | Iname_for_debugger _ ->
      assert false
    | Imove ->
      `  mov.{emit_res res} {emit_reg res.(0)}, {emit_reg arg.(0)}\n`
    | Iconst_int(n) ->
      `  mov.i64 {emit_reg res.(0)}, {emit_printf "0x%nx" n}\n`;
    | Iconst_float(f) ->
      `  mov.f64 {emit_reg res.(0)}, {emit_printf "0x%Lx" f}\n`;
    | Iconst_symbol(s) ->
      `  mov.i64 {emit_reg res.(0)}, {emit_symbol s}\n`;
    | Icall_ind _ ->
      let callee = arg.(0) in
      let args = Array.sub arg 1 (Array.length arg - 1) in
      begin match handler with
        | None -> `  call.{emit_call_ret ()}{emit_string (call_types res)}.caml`;
        | Some _ -> `  invoke.{emit_call_ret ()}{emit_string (call_types res)}.caml`;
      end;
      ` {emit_state_regs ()}{emit_regs res ", " ""},`;
      ` {emit_reg callee},`;
      ` {emit_state_regs ()}{emit_regs args ", " ""}`;
      begin match handler with
        | None -> ()
        | Some (handler, _) -> `, {emit_label handler}`;
      end;
      ` {emit_frame false dbg}\n`
    | Icall_imm { func } ->
      let addr = make_temp () in
      `  mov.i64 {emit_temp addr}, {emit_symbol func}\n`;
      begin match handler with
        | None -> `  call.{emit_call_ret ()}{emit_string (call_types res)}.caml`;
        | Some _ -> `  invoke.{emit_call_ret ()}{emit_string (call_types res)}.caml`
      end;
      ` {emit_state_regs ()}{emit_regs res ", " ""},`;
      ` {emit_temp addr},`;
      ` {emit_state_regs ()}{emit_regs arg ", " ""}`;
      begin match handler with
        | None -> ()
        | Some (handler, _) -> `, {emit_label handler}`
      end;
      ` {emit_frame false dbg}\n`
    | Itailcall_ind(_) ->
      assert (Option.is_none handler);
      let callee = arg.(0) in
      let args = Array.sub arg 1 (Array.length arg - 1) in
      `  tcall.{emit_call_ret ()}.v64.caml`;
      ` {emit_reg callee},`;
      ` {emit_state_regs ()}{emit_regs args ", " ""}`;
      ` {emit_frame false dbg}\n`;
    | Itailcall_imm { func } ->
      assert (Option.is_none handler);
      let addr = make_temp () in
      `  mov.i64 {emit_temp addr}, {emit_symbol func}\n`;
      `  tcall.{emit_call_ret ()}.v64.caml`;
      ` {emit_temp addr},`;
      ` {emit_state_regs ()}{emit_regs arg ", " ""}`;
      ` {emit_frame false dbg}\n`
    | Iextcall { func; alloc } ->
      if alloc then begin
        state_fields |> List.iter (fun (field, reg) ->
          let addr = domain_field field in
          `  st.i64  [{emit_temp addr}], {emit_temp reg}\n`);
        let addr = make_temp () in
        `  mov.i64 {emit_temp addr}, {emit_symbol func}\n`;
        begin match handler with
          | None -> `  call`;
          | Some _ -> `  invoke`;
        end;
        `{emit_string (call_types res)}.c`;
        ` {emit_regs res "" ","}`;
        ` {emit_temp addr}`;
        ` {emit_regs arg ", " ""}`;
        begin match handler with
          | None -> ()
          | Some (handler, _) -> `, {emit_label handler}`;
        end;
        ` {emit_frame false dbg}\n`;
        state_fields |> List.iter (fun (field, reg) ->
          let addr = domain_field field in
          `  ld.i64  {emit_temp reg}, [{emit_temp addr}]\n`)
      end else begin
        let addr = make_temp () in
        `  mov.i64 {emit_temp addr}, {emit_symbol func}\n`;
        `  call{emit_string (call_types res)}.c`;
        ` {emit_regs res "" ","}`;
        ` {emit_temp addr}`;
        ` {emit_regs arg ", " ""}\n`
      end
    | Iload(size, addr) ->
      let extension from dst kind =
        let ext = make_temp () in
        ( from
        , (fun () ->
          emit_temp ext)
        , (fun () ->
          ` {emit_string kind}.{emit_string dst} {emit_reg res.(0)}, {emit_temp ext}\n`)
        )
      in
      let load_ty, temp, extend = match size with
        | Byte_unsigned       -> extension "i8"  "i64" "zext"
        | Byte_signed         -> extension "i8"  "i64" "sext"
        | Sixteen_unsigned    -> extension "i16" "i64" "zext"
        | Sixteen_signed      -> extension "i16" "i64" "sext"
        | Thirtytwo_unsigned  -> extension "i32" "i64" "zext"
        | Thirtytwo_signed    -> extension "i32" "i64" "sext"
        | Single              -> extension "f32" "f64" "fext"
        | Word_int
        | Word_val ->
          ( string_of_type res.(0).typ
          , (fun () -> emit_reg res.(0))
          , (fun () -> ())
          )
        | Double
        | Double_u ->
          ( "f64"
          , (fun () -> emit_reg res.(0))
          , (fun () -> ())
          )
      in
      (match addr with
      | Iindexed(0) ->
        `  ld.{emit_string load_ty} {temp ()}, [{emit_reg arg.(0)}]\n`
      | Iindexed(n) ->
        let imm = emit_const n in
        let addr = make_temp () in
        `  add.i64 {emit_temp addr}, {emit_reg arg.(0)}, {emit_temp imm}\n`;
        `  ld.{emit_string load_ty} {temp ()}, [{emit_temp addr}]\n`
      );
      extend ()
    | Istore(size, addr, _) ->
      let truncate ty =
        let temp = make_temp () in
        `  trunc.{emit_string ty} {emit_temp temp}, {emit_reg arg.(0)}\n`;
        (fun () -> emit_temp temp)
      in
      let ext =
        match size with
        | Byte_unsigned       -> truncate "i8"
        | Byte_signed         -> truncate "i8"
        | Sixteen_unsigned    -> truncate "i16"
        | Sixteen_signed      -> truncate "i16"
        | Thirtytwo_unsigned  -> truncate "i32"
        | Thirtytwo_signed    -> truncate "i32"
        | Single              -> truncate "f32"
        | Word_int
        | Word_val
        | Double
        | Double_u ->
          (fun () -> emit_reg arg.(0))
      in
      (match addr with
      | Iindexed(0) ->
        `  st [{emit_reg arg.(1)}], {ext ()}\n`
      | Iindexed(n) ->
        let imm = emit_const n in
        let addr = make_temp () in
        `  add.i64 {emit_temp addr}, {emit_reg arg.(1)}, {emit_temp imm}\n`;
        `  st [{emit_temp addr}], {ext ()}\n`
      );
    | Ialloc { bytes; dbginfo } ->
      let adjust, func =
        match bytes with
        | 16 -> None, "caml_alloc1"
        | 24 -> None, "caml_alloc2"
        | 32 -> None, "caml_alloc3"
        | _ -> Some bytes, "caml_allocN"
      in
      adjust |> Option.iter (fun bytes ->
        let vreg_bytes = emit_const bytes in
        `  sub.i64 $5001, $5001, {emit_temp vreg_bytes}\n`);
      let fn = emit_addr func in
      begin match handler with
      | None ->
        `  call.{emit_call_ret ()}.caml_alloc {emit_state_regs ()}, {emit_temp fn}, {emit_state_regs ()} {emit_alloc_frame dbginfo}\n`
      | Some (handler, _) ->
        `  invoke.{emit_call_ret ()}.caml_alloc {emit_state_regs ()}, {emit_temp fn}, {emit_state_regs ()}, {emit_label handler} {emit_alloc_frame dbginfo}\n`
      end;
      let offset = emit_const 8 in
      `  add.{emit_res res} {emit_reg res.(0)}, $5001, {emit_temp offset}\n`
    | Iintop(op) ->
      emit_intop res arg (fun () -> emit_reg arg.(1)) dbg op handler
    | Iintop_imm(op, n) ->
      let imm = emit_const n in
      emit_intop res arg (fun () -> emit_temp imm) dbg op handler
    | Inegf ->
      `  neg.f64 {emit_reg res.(0)}, {emit_reg arg.(0)}\n`;
    | Iabsf ->
      `  abs.f64 {emit_reg res.(0)}, {emit_reg arg.(0)}\n`;
    | Iaddf ->
      `  add.f64 {emit_reg res.(0)}, {emit_reg arg.(0)}, {emit_reg arg.(1)}\n`;
    | Isubf ->
      `  sub.f64 {emit_reg res.(0)}, {emit_reg arg.(0)}, {emit_reg arg.(1)}\n`;
    | Imulf ->
      `  mul.f64 {emit_reg res.(0)}, {emit_reg arg.(0)}, {emit_reg arg.(1)}\n`;
    | Idivf ->
      `  sdiv.f64 {emit_reg res.(0)}, {emit_reg arg.(0)}, {emit_reg arg.(1)}\n`;
    | Ifloatofint ->
      `  sext.f64 {emit_reg res.(0)}, {emit_reg arg.(0)}\n`;
    | Iintoffloat ->
      `  trunc.i64 {emit_reg res.(0)}, {emit_reg arg.(0)}\n`;
    | Ispecific Ibswap16 ->
      let tmpa, tmpr = make_temp (), make_temp () in
      `  trunc.i16 {emit_temp tmpa}, {emit_reg arg.(0)}\n`;
      `  bswap.i16 {emit_temp tmpr}, {emit_temp tmpa}\n`;
      `  zext.{emit_res res} {emit_reg res.(0)}, {emit_temp tmpr}\n`;
    | Ispecific Ibswap32 ->
      let tmpa, tmpr = make_temp (), make_temp () in
      `  trunc.i32 {emit_temp tmpa}, {emit_reg arg.(0)}\n`;
      `  bswap.i32 {emit_temp tmpr}, {emit_temp tmpa}\n`;
      `  zext.{emit_res res} {emit_reg res.(0)}, {emit_temp tmpr}\n`;
    | Ispecific Ibswap64 ->
      `  bswap.{emit_res res} {emit_reg res.(0)}, {emit_reg arg.(0)}\n`;
    | Ispecific Isqrt ->
      `  sqrt.{emit_res res} {emit_reg res.(0)}, {emit_reg arg.(0)}\n`;
  in

  let emit_instr arg res dbg = function
    | Lprologue | Lend | Lreloadretaddr | Ladjust_trap_depth _ ->
      ()
    | Lop(op, handler) ->
      emit_op arg res handler dbg op
    | Lreturn ->
      `  ret {emit_state_regs ()}{emit_regs arg ", " ""}\n`;
    | Llabel(label) ->
      `{emit_label label}:\n`
    | Lbranch(label) ->
      `  jmp {emit_label label}\n`
    | Lcondbranch(test, p, label) ->
      begin match test with
      | Itruetest ->
        `  jt {emit_reg arg.(0)}, {emit_label label}{emit_prob p true}\n`
      | Ifalsetest ->
        `  jf {emit_reg arg.(0)}, {emit_label label}{emit_prob p false}\n`
      | Iinttest cc ->
        let flag = make_temp () in
        `  cmp.{emit_cc cc}.i8 {emit_temp flag}, {emit_reg arg.(0)}, {emit_reg arg.(1)}\n`;
        `  jt {emit_temp flag}, {emit_label label}{emit_prob p true}\n`
      | Iinttest_imm(cc, n) ->
        let imm = emit_const n in
        let flag = make_temp () in
        `  cmp.{emit_cc cc}.i8 {emit_temp flag}, {emit_reg arg.(0)}, {emit_temp imm}\n`;
        `  jt {emit_temp flag}, {emit_label label}{emit_prob p true}\n`
      | Ifloattest(cc) ->
        let cond = match cc with
          | CFeq  -> "oeq"
          | CFneq -> "une"
          | CFlt  -> "olt"
          | CFnlt -> "uge"
          | CFgt  -> "ogt"
          | CFngt -> "ule"
          | CFle  -> "ole"
          | CFnle -> "ugt"
          | CFge  -> "oge"
          | CFnge -> "ult"
        in
        let flag = make_temp () in
        `  cmp.{emit_string cond}.i8 {emit_temp flag}, {emit_reg arg.(0)}, {emit_reg arg.(1)}\n`;
        `  jt {emit_temp flag}, {emit_label label}{emit_prob p true}\n`
      | Ioddtest ->
        let imm = emit_const 1 in
        let flag = make_temp () in
        `  and.i64 {emit_temp flag}, {emit_reg arg.(0)}, {emit_temp imm}\n`;
        `  jt {emit_temp flag}, {emit_label label}{emit_prob p true}\n`
      | Ieventest ->
        let imm = emit_const 1 in
        let flag = make_temp () in
        `  and.i64 {emit_temp flag}, {emit_reg arg.(0)}, {emit_temp imm}\n`;
        `  jf {emit_temp flag}, {emit_label label}{emit_prob p false}\n`
      end
    | Lcondbranch3(lbl_lt, lbl_eq, lbl_gt) ->
        let imm = emit_const 1 in
        let flag = make_temp () in
        let emit cc lbl =
          `  cmp.{emit_string cc}.i8 {emit_temp flag}, {emit_reg arg.(0)}, {emit_temp imm}\n`;
          `  jt {emit_temp flag}, {emit_label lbl}\n`
        in
        lbl_lt |> Option.iter (emit "lt");
        lbl_eq |> Option.iter (emit "eq");
        lbl_gt |> Option.iter (emit "gt")
    | Lswitch(labels) ->
      `  switch {emit_reg arg.(0)}, `;
      let n = Array.length labels in
      Array.iteri (fun i l ->
        `{emit_label l}`;
        if i + 1 <> n then `, ` else ()
      ) labels;
      `\n`
    | Lentertrap ->
      `  landing_pad.{emit_call_ret ()}.v64.caml {emit_state_regs ()}, {emit_reg Proc.loc_exn_bucket}\n`;
    | Lpushtrap { lbl_handler; trap_depth } ->
      let jmp_addr = make_temp () in
      let jmp_frame = make_temp () in
      `  mov.i64 {emit_temp jmp_addr}, {emit_label lbl_handler}\n`;
      `  frame.i64 {emit_temp jmp_frame}, {emit_int trap_depth}, 0\n`;
      `  st [{emit_temp jmp_frame}], {emit_temp jmp_addr}\n`;

      let sp_val = make_temp () in
      let sp_frame = make_temp () in
      `  get.i64 {emit_temp sp_val}, $sp\n`;
      `  frame.i64 {emit_temp sp_frame}, {emit_int trap_depth}, 8\n`;
      `  st [{emit_temp sp_frame}], {emit_temp sp_val}\n`;

      let exc_frame = make_temp () in
      `  frame.i64 {emit_temp exc_frame}, {emit_int trap_depth}, 16\n`;
      begin match get_field Domainstate.Domain_exception_pointer with
      | Some reg ->
        `  st [{emit_temp exc_frame}], {emit_temp reg}\n`;
        `  mov.i64 {emit_temp reg}, {emit_temp jmp_frame}\n`;
      | None ->
        let exc_ptr_addr = domain_field Domainstate.Domain_exception_pointer in
        let exc_ptr_old_val = make_temp () in
        `  ld.i64 {emit_temp exc_ptr_old_val}, [{emit_temp exc_ptr_addr}]\n`;
        `  st [{emit_temp exc_frame}], {emit_temp exc_ptr_old_val}\n`;
        `  st [{emit_temp exc_ptr_addr}], {emit_temp jmp_frame}\n`;
      end
    | Lpoptrap { trap_depth }->
      let exc_frame = make_temp () in
      `  frame.i64 {emit_temp exc_frame}, {emit_int trap_depth}, 16\n`;
      begin match get_field Domainstate.Domain_exception_pointer with
      | Some reg ->
        `  ld.i64 {emit_temp reg}, [{emit_temp exc_frame}]\n`;
      | None ->
        let exc_ptr_addr = domain_field Domainstate.Domain_exception_pointer in
        let exc_ptr_old_val = make_temp () in
        `  ld.i64 {emit_temp exc_ptr_old_val}, [{emit_temp exc_frame}]\n`;
        `  st.8 [{emit_temp exc_ptr_addr}], {emit_temp exc_ptr_old_val}\n`;
      end
    | Lraise { kind; lbl_handler } ->
      let emit_call () =
        let fn = emit_addr "caml_raise_exn" in
        begin match lbl_handler with
          | None -> `  call.caml`;
          | Some _ -> `  invoke.caml`;
        end;
        `  {emit_temp fn}, {emit_state_regs ()}{emit_regs arg ", " ""} `;
        begin match lbl_handler with
          | None -> ()
          | Some (handler, _) -> `, {emit_label handler}`
        end;
        ` {emit_frame true dbg}\n`;
        `  trap\n`
      in
      begin match kind with
      | Lambda.Raise_regular ->
        `  # Lraise (Lambda.Raise_regular)\n`;
        let pos_addr = domain_field Domainstate.Domain_backtrace_pos in
        let zero = emit_const 0 in
        `  st [{emit_temp pos_addr}], {emit_temp zero}\n`;
        emit_call ()
      | Lambda.Raise_reraise ->
        `  # Lraise (Lambda.Raise_reraise)\n`;
        emit_call ()
      | Lambda.Raise_notrace ->
        `  # Lraise (Lambda.Raise_notrace)\n`;
        let frame_addr =
          match get_field Domainstate.Domain_exception_pointer with
          | Some reg ->
            reg
          | _ ->
            let exc_ptr_addr = domain_field Domainstate.Domain_exception_pointer in
            let frame_addr = make_temp () in
            `  ld.i64 {emit_temp frame_addr}, [{emit_temp exc_ptr_addr}]\n`;
            frame_addr
        in
        let off = emit_const 8 in
        let addr = make_temp () in
        `  ld.i64 {emit_temp addr}, [{emit_temp frame_addr}]\n`;
        let addr8 = make_temp () in
        `  add.i64 {emit_temp addr8}, {emit_temp frame_addr}, {emit_temp off}\n`;
        let addr16 = make_temp () in
        `  add.i64 {emit_temp addr16}, {emit_temp addr8}, {emit_temp off}\n`;
        let sp_val = make_temp () in
        `  ld.i64 {emit_temp sp_val}, [{emit_temp addr8}]\n`;
        let frame_val = make_temp () in
        `  ld.i64 {emit_temp frame_val}, [{emit_temp addr16}]\n`;
        begin match get_field Domainstate.Domain_exception_pointer with
        | Some reg ->
          `  mov.i64 {emit_temp reg}, {emit_temp frame_val}\n`;
        | None ->
          let exc_ptr_addr = domain_field Domainstate.Domain_exception_pointer in
          `  st [{emit_temp exc_ptr_addr}], {emit_temp frame_val}\n`;
        end;
        begin match lbl_handler with
        | None ->
          `  raise.caml {emit_temp addr}, {emit_temp sp_val}, {emit_state_regs ()}, {emit_reg arg.(0)}\n`;
        | Some (_, ha) ->
          `  mov.v64 {emit_reg Proc.loc_exn_bucket}, {emit_reg arg.(0)}\n`;
          `  jmp {emit_label ha}\n`
        end
      end
  in
  let is_terminator = function
    | Lreturn -> true
    | Lop (Itailcall_imm _, _) -> true
    | Lop (Itailcall_ind _, _) -> true
    | Lraise _ -> true
    | _ -> false
  in
  let rec emit i =
    match i with
    | { desc = Lend } ->
      ()
    | { next = { desc = Lend } } when not (is_terminator i.desc) ->
        emit_instr i.arg i.res i.dbg i.desc;
        `  mov.i64 $6000, 1\n`;
        `  ret     {emit_state_regs ()}, $6000\n`
    | instr ->
      emit_instr instr.arg instr.res i.dbg instr.desc;
      emit instr.next
  in

  (* Emit argument types and instructions to load them. *)
  `  .args i64`;
  List.iter (fun _ -> `, i64`) state_fields;
  Array.iter (fun reg -> `, {emit_type reg.typ}`) f.fun_args;
  `\n`;
  `  arg.i64 $5000, 0\n`;
  state_fields |> List.iteri (fun i (_, reg) ->
    `  arg.i64 {emit_temp reg}, {emit_int (i + 1)}\n`);
  let nstate = List.length state_fields in
  Array.iteri
    (fun i reg ->
      `  arg.{emit_type reg.typ} {emit_reg reg}, {emit_int (i + 1 + nstate)}\n`)
    f.fun_args;

  (* Find all stack objects. *)
  let rec sizeof_frame n = function
    | { desc = Lend } ->
        n
    | { desc = Lpushtrap { trap_depth }; next } ->
        sizeof_frame (max n trap_depth) next
    | { desc = Lpoptrap { trap_depth }; next } ->
        sizeof_frame (max n trap_depth) next
    | { next } ->
        sizeof_frame n next
  in
  for i = 0 to sizeof_frame (-1) f.fun_body do
    `  .stack_object {emit_int i}, 24, 8\n`;
  done;

  (* Emit the body. *)
  emit f.fun_body;

  (* Emit bound error call *)
  !bound_error_labels |> List.iter begin fun (handler, (label, dbg)) ->
    `{emit_label label}:\n`;
    let addr = emit_addr "caml_ml_array_bound_error" in
    begin match handler with
      | None -> `  call.caml`;
      | Some _ -> `  invoke.caml`;
    end;
    `  {emit_temp addr}, {emit_state_regs ()}`;
    begin match handler with
      | None -> ()
      | Some (handler, _) -> `, {emit_label handler}`
    end;
    ` {emit_frame false dbg}\n`;
    `  trap\n`;
  end;
  `\n`;
  `  .end\n`

let data = function
  | [] ->
    ()
  | items ->
    `  .section .data.caml\n`;
    `  .p2align 3\n`;
    items |> List.iter (function
    | Cstring s          -> emit_string_directive "  .ascii  " s
    | Cskip n            -> if n > 0 then `  .space   {emit_int n}\n`
    | Cdefine_symbol s   -> `{emit_symbol s}:\n`
    | Cglobal_symbol s   -> `  .globl   {emit_symbol s}\n`
    | Calign n           -> `  .p2align {emit_int n}\n`
    | Cint8 n            -> `  .byte    {emit_int n}\n`
    | Cint16 n           -> `  .short   {emit_int n}\n`
    | Cint32 n           -> `  .long    {emit_printf "0x%nx" n}\n`
    | Cint n             -> `  .quad    {emit_printf "0x%nx" n}\n`
    | Csymbol_address s  -> `  .quad    {emit_symbol s}\n`
    | Csingle f          -> `  .float   {emit_printf "0x%Lx" (Int64.bits_of_float f)}\n`
    | Cdouble f          -> `  .double  {emit_printf "0x%Lx" (Int64.bits_of_float f)}\n`
    );
    `  .end\n`;
    `\n`

let reference_symbols symbols =
  List.iter
    (fun symbol -> `.extern {emit_symbol symbol}\n`)
    symbols

let begin_assembly () = ()

let end_assembly () = ()
